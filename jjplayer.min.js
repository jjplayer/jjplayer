
(function () {
    "use strict";
    var totaljjPlayer, idElement;
    function jjPlayer(jjPlayerID) {
        var videoTarget, jjPlayerElem, jjPlayerVideo, jjPlayerLegends, jjPlayerLoader, jjPlayerControls, volTarget, rangeVol, sliderVol, sliderDrag, rangeSeeker, progressBuffer, progressVideo, currentTimeTooltip, trackCaption, activeCaption, cuesTrack, cuesText, activityMouseFull, activityMouseTime, systemTime, isTouch, elementFullScreen, played;
        var jjPlayerBtnPlay, jjPlayerProgress, jjPlayerTotalTime, jjPlayerBtnVol, jjPlayerSliderVol, jjPlayerBtnCC, jjPlayerBtnScreen, jjPlayerBtnPlayCenter;
        var svgIcos, icoVol, jjPlayerContent;
        isTouch = ('ontouchstart' in document.documentElement === true);
        sliderDrag = false;
        cuesText = '';
        activeCaption = 'disabled';
        activityMouseFull = false;
        played = false;
        svgIcos = {
            play: '<svg viewBox="0 0 12 18"><path d="M13.6,8.1L1.9,0.2C1.1-0.3,0,0.2,0,1.1v15.7c0,0.9,1.1,1.5,1.9,0.9l11.7-7.9C14.1,9.4,14.1,8.6,13.6,8.1L13.6,8.1z"/></svg>',
            pause: '<svg viewBox="0 0 18 18"><path d="M6 1H3c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zM12 1c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1h-3z"/></svg>',
            restart: '<svg viewBox="0 0 18 18"><path d="M9.7 1.2l.7 6.4 2.1-2.1c1.9 1.9 1.9 5.1 0 7-.9 1-2.2 1.5-3.5 1.5-1.3 0-2.6-.5-3.5-1.5-1.9-1.9-1.9-5.1 0-7 .6-.6 1.4-1.1 2.3-1.3l-.6-1.9C6 2.6 4.9 3.2 4 4.1 1.3 6.8 1.3 11.2 4 14c1.3 1.3 3.1 2 4.9 2 1.9 0 3.6-.7 4.9-2 2.7-2.7 2.7-7.1 0-9.9L16 1.9l-6.3-.7z"/></svg>',
            playc: '<svg viewBox="0 0 12 18"><path d="M13.6,8.1L1.9,0.2C1.1-0.3,0,0.2,0,1.1v15.7c0,0.9,1.1,1.5,1.9,0.9l11.7-7.9C14.1,9.4,14.1,8.6,13.6,8.1L13.6,8.1z"/></svg>',
            pausec: '<svg viewBox="0 0 18 18"><path d="M6 1H3c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zM12 1c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1h-3z"/></svg>',
            volhigh: '<svg viewBox="0 0 18 18"><path d="M15.6 3.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4C15.4 5.9 16 7.4 16 9c0 1.6-.6 3.1-1.8 4.3-.4.4-.4 1 0 1.4.2.2.5.3.7.3.3 0 .5-.1.7-.3C17.1 13.2 18 11.2 18 9s-.9-4.2-2.4-5.7z"></path><path d="M11.282 5.282a.909.909 0 0 0 0 1.316c.735.735.995 1.458.995 2.402 0 .936-.425 1.917-.995 2.487a.909.909 0 0 0 0 1.316c.145.145.636.262 1.018.156a.725.725 0 0 0 .298-.156C13.773 11.733 14.13 10.16 14.13 9c0-.17-.002-.34-.011-.51-.053-.992-.319-2.005-1.522-3.208a.909.909 0 0 0-1.316 0zM3.786 6.008H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z"></path></svg>',
            vollow: '<svg viewBox="0 0 18 18"></path><path d="M11.282 5.282a.909.909 0 0 0 0 1.316c.735.735.995 1.458.995 2.402 0 .936-.425 1.917-.995 2.487a.909.909 0 0 0 0 1.316c.145.145.636.262 1.018.156a.725.725 0 0 0 .298-.156C13.773 11.733 14.13 10.16 14.13 9c0-.17-.002-.34-.011-.51-.053-.992-.319-2.005-1.522-3.208a.909.909 0 0 0-1.316 0zM3.786 6.008H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z"></path></svg>',
            volmute: '<svg viewBox="0 0 18 18"><path d="M12.4 12.5l2.1-2.1 2.1 2.1 1.4-1.4L15.9 9 18 6.9l-1.4-1.4-2.1 2.1-2.1-2.1L11 6.9 13.1 9 11 11.1zM3.786 6.008H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z"/></svg>',
            cc: '<svg viewBox="0 0 18 18"><path d="M1 1c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h4.6l2.7 2.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.7-2.7H17c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1H1zm4.52 10.15c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41C8.47 4.96 7.46 3.76 5.5 3.76c-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69zm7.57 0c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41c-.28-1.15-1.29-2.35-3.25-2.35-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69z" fill-rule="evenodd"/></svg>',
            fullscreen: '<svg viewBox="0 0 18 18"><path d="M10 3h3.6l-4 4L11 8.4l4-4V8h2V1h-7zM7 9.6l-4 4V10H1v7h7v-2H4.4l4-4z"/></svg>',
            restore: '<svg viewBox="0 0 18 18"><path d="M1 12h3.6l-4 4L2 17.4l4-4V17h2v-7H1zM16 .6l-4 4V1h-2v7h7V6h-3.6l4-4z"/></svg>'
        };
        jjPlayerContent = '<div class="jjplayer-loader"><div class="jjplayer-loader-box"><div class="jjplayer-gif"><div class="jjplayer-spinner"><div class="jjplayer-bounce1"></div><div class="jjplayer-bounce2"></div><div class="jjplayer-bounce3"></div></div></div></div></div><button type="button" class="jjplayer-play-center"><svg viewBox="0 0 18 18"></svg></button><div class="jjplayer-legends"><span></span></div><div class="jjplayer-controls jjplayer-controls-show"><button type="button" class="jjplayer-play"><svg viewBox="0 0 18 18"></svg><span class="jjplayer-tooltip">Iniciar</span></button><div class="jjplayer-presentation"><input class="jjplayer-rangeprog" type="range" min="0" max="100" step="0.1" value="0"><div class="jjplayer-progress"><span class="jjplayer-pbuffer"></span><span class="jjplayer-pplayed"></span></div><span class="jjplayer-tooltip">00:00</span></div><span class="jjplayer-time">00:00</span><button type="button" class="jjplayer-vol"><svg viewBox="0 0 18 18"></svg><span class="jjplayer-tooltip">Desativar</span></button><div class="jjplayer-volume"><input class="jjplayer-rangevol" type="range" min="0" max="1" value="1" step="0.01"><div class="jjplayer-progress"><span class="jjplayer-setvolume" style="width: 100%;"></span></div></div><button type="button" class="jjplayer-captions disabled"><svg viewBox="0 0 18 18"></svg><span class="jjplayer-tooltip">Legenda</span></button><button type="button" class="jjplayer-screen"><svg viewBox="0 0 18 18"></svg><span class="jjplayer-tooltip">Tela Cheia</span></button></div>';
        function construct() {
            videoTarget = get(document, jjPlayerID);
            videoTarget.insertAdjacentHTML('afterend', '<div id="' + jjPlayerID + '"></div>');
            document.getElementById(jjPlayerID).remove();
            jjPlayerElem = get(document, jjPlayerID);
            videoTarget.removeAttribute('id');
            videoTarget.removeAttribute('class');
            jjPlayerElem.appendChild(videoTarget);
            jjPlayerElem.setAttribute('class', 'jjplayer-video jjplayer-cursor-show jjplayer-fullscreen-off');
            jjPlayerElem.innerHTML += jjPlayerContent;
            jjPlayerVideo = get(jjPlayerElem, 'video', 'tag');
            jjPlayerLoader = get(jjPlayerElem, 'jjplayer-loader', 'class');
            jjPlayerBtnPlayCenter = get(jjPlayerElem, 'jjplayer-play-center', 'class');
            jjPlayerBtnPlayCenter.innerHTML = svgIcos.playc;
            jjPlayerLegends = get(jjPlayerElem, 'jjplayer-legends', 'class');
            jjPlayerControls = get(jjPlayerElem, 'jjplayer-controls', 'class');
            jjPlayerBtnPlay = get(jjPlayerControls, 'jjplayer-play', 'class');
            jjPlayerBtnPlay.innerHTML = svgIcos.play;
            jjPlayerProgress = get(jjPlayerControls, 'jjplayer-presentation', 'class');
            rangeSeeker = get(jjPlayerProgress, 'input', 'tag');
            progressBuffer = get(jjPlayerProgress, 'jjplayer-pbuffer', 'class');
            currentTimeTooltip = get(jjPlayerProgress, 'jjplayer-tooltip', 'class');
            progressVideo = get(jjPlayerProgress, 'jjplayer-pplayed', 'class');
            jjPlayerTotalTime = get(jjPlayerControls, 'jjplayer-time', 'class');
            jjPlayerBtnVol = get(jjPlayerControls, 'jjplayer-vol', 'class');
            jjPlayerBtnVol.innerHTML = svgIcos.volhigh;
            icoVol = 'volhigh';
            jjPlayerSliderVol = get(jjPlayerControls, 'jjplayer-volume', 'class');
            rangeVol = get(jjPlayerSliderVol, 'input', 'tag');
            sliderVol = get(jjPlayerSliderVol, 'jjplayer-setvolume', 'class');
            jjPlayerBtnCC = get(jjPlayerControls, 'jjplayer-captions', 'class');
            jjPlayerBtnCC.innerHTML = svgIcos.cc;
            handler(jjPlayerBtnCC, 'click', setTrack, !0);
            jjPlayerBtnScreen = get(jjPlayerControls, 'jjplayer-screen', 'class');
            jjPlayerBtnScreen.innerHTML = svgIcos.fullscreen;
            handler(jjPlayerProgress, 'mousedown', startDrag, !0);
            handler(jjPlayerSliderVol, 'mousedown', startDrag, !0);
            handler(jjPlayerBtnVol, 'click', muteVideo, !0);
            handler(jjPlayerSliderVol, 'mousedown click mousewheel touchstart touchmove touchend', setVolume, !0);
            handler(jjPlayerBtnScreen, 'click', expandPlayer, !0);
            handler(document, 'mouseup', startDrag, !0);
            handler(document, 'webkitfullscreenchange mozfullscreenchange fullscreenchange', checkFullscren, !0);
            handler(jjPlayerVideo, 'canplay', canplay, !0);
            handler(jjPlayerVideo, 'timeupdate', updateTimer, !0);
            handler(jjPlayerVideo, 'waiting canplay playing play loadstart seeked', videoLoader, !0);
            handler(jjPlayerVideo, 'ended', restartVideo, !0);
            autoCorretor();
            handler(jjPlayerVideo, 'error', videoError, !0);
            handler(jjPlayerElem, 'mousemove', checkMouseActivity, !0);
            activityMouseFull = false;
            handler(jjPlayerVideo, 'progress', progressBuffering, !0);
        }
        function checkMouseActivity(evt) {
            if (!activityMouseFull) {
                activityMouseFull = true;
                var e = jjPlayerElem.className;
                jjPlayerElem.className = e.replace("jjplayer-cursor-hidden", "jjplayer-cursor-show");
            }
            var d = new Date();
            activityMouseTime = d.getTime();
        }
        function progressBuffering() {

            var d = jjPlayerVideo.duration,
                c = jjPlayerVideo.currentTime,
                buffer = jjPlayerVideo.buffered,
                bufferW = 0;

            if (d > 0) {
                for (var i = 0; i < buffer.length; i++) {
                    if (buffer.start(buffer.length - 1 - i) < c) {
                        progressBuffer.style.width = (buffer.end(buffer.length - 1 - i) / d) * 100 + "%";
                        break;
                    }
                }
            }
        }
        function updateTimer(evt) {
            var h = Math.floor(jjPlayerVideo.currentTime / 3600),
                m = Math.floor(jjPlayerVideo.currentTime / 60),
                s = Math.floor(((jjPlayerVideo.currentTime / 60) % 1) * 60);
            jjPlayerTotalTime.textContent = convertTimer(h, m, s);
            var pctSeek = (jjPlayerVideo.currentTime / jjPlayerVideo.duration) * 100;
            if (!sliderDrag) {
                progressVideo.style.width = pctSeek + '%';
                rangeSeeker.value = pctSeek;
            }
            if (trackCaption) {
                if (trackCaption.mode == 'showing') {
                    trackCaption.mode = 'hidden';
                    activeCaption = 'hidden';
                }
                if (trackCaption.mode != 'disabled') {
                    cuesControls();
                }
            }
            var ms = new Date();
            if (activityMouseFull) {
                if (ms.getTime() > (activityMouseTime + 3000)) {
                    activityMouseFull = false;
                    var e = jjPlayerElem.className;
                    jjPlayerElem.className = e.replace("jjplayer-cursor-show", "jjplayer-cursor-hidden");
                }
            }
        }
        function checkFullscren() {
            var df = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
            var c = jjPlayerElem.className;
            if (!df) {
                jjPlayerElem.className = c.replace('jjplayer-fullscreen-on', 'jjplayer-fullscreen-off');
                jjPlayerBtnScreen.innerHTML = svgIcos.fullscreen;
            } else {
                jjPlayerElem.className = c.replace('jjplayer-fullscreen-off', 'jjplayer-fullscreen-on');
                jjPlayerBtnScreen.innerHTML = svgIcos.restore;
            }
        }
        function restartVideo(evt) {
            jjPlayerBtnPlay.innerHTML = svgIcos.restart;
            var e = jjPlayerElem.className;
            jjPlayerElem.className = e.replace("jjplayer-cursor-hidden", "jjplayer-cursor-show");
            jjPlayerBtnPlayCenter.innerHTML = svgIcos.playc;
            jjPlayerBtnPlayCenter.style.display = 'block';
        }
        function autoCorretor() {
            jjPlayerElem.setAttribute('oncontextmenu', 'return false');
            jjPlayerVideo.controls = false;
            if (!jjPlayerElem.getElementsByTagName('track')[0]) {
                jjPlayerBtnCC.remove();
            }
            if (jjPlayerVideo.preload == 'none') {
                handler(jjPlayerBtnPlay, 'click', playVideo, !0);
                handler(jjPlayerBtnPlayCenter, 'click', playVideo, !0);
                handler(jjPlayerVideo, 'click', playVideo, !0);
                if (isTouch) {
                    handler(jjPlayerVideo, 'click', playVideo, !1);
                }
            }
        }
        function convertTimer(hours, minutes, seconds) {
            hours = (hours < 10 && hours > 0 ? '0' + hours + ":" : '');
            minutes = ((minutes < 10) ? '0' + minutes : minutes);
            minutes = ((minutes > 59) ? (minutes - (Math.floor(minutes / 60) * 60)) : minutes);
            seconds = ((seconds < 10) ? '0' + seconds : seconds);
            return String(hours) + String(minutes) + ':' + String(seconds);
        }
        function videoError() {
            jjPlayerTotalTime.textContent = '00:00';
            currentTimeTooltip.textContent = '00:00';
        }
        function startDrag(evt) {
            if (evt.type == "mousedown") {
                sliderDrag = true;
                if (String(evt.target.className) === 'jjplayer-rangevol') {
                    handler(jjPlayerSliderVol, 'mousemove', setVolume, !0);
                }
            } else {
                sliderDrag = false;
                jjPlayerSliderVol.removeEventListener('mousemove', setVolume);
            }
        }
        function setVolume(evt) {
            var value = rangeVol.value,
                clientX = 0,
                ClientRect = jjPlayerSliderVol.getBoundingClientRect(),
                position = 0,
                deltaWheel = Math.max(-1, Math.min(1, evt.wheelDelta));

            if (String(evt.type) !== 'touchend') {
                clientX = (String(evt.clientX) !== 'undefined' ? evt.clientX : evt.touches[0].clientX);
                clientX = (clientX - ClientRect.left) / rangeVol.clientWidth;
            }
            switch (evt.type) {
                case 'touchstart':
                    sliderVol.style.width = (clientX * 100) + '%';
                    break;
                case 'mousemove':
                    if (sliderDrag) {
                        updateVolume();
                    }
                    break;
                case 'mousewheel':
                    rangeVol.value -= (-0.1 * deltaWheel);
                    value = rangeVol.value;
                    updateVolume();
                    break;
                default:
                    updateVolume();
            }
            function updateVolume() {
                if (jjPlayerVideo.muted) {
                    jjPlayerVideo.muted = false;
                }
                jjPlayerVideo.volume = value;
                sliderVol.style.width = (value * 100) + '%';
                volTarget = (jjPlayerVideo.volume > 0 ? jjPlayerVideo.volume : 1);
                if (jjPlayerVideo.volume > 0) {
                    if (jjPlayerVideo.volume >= 0.5) {
                        if (icoVol != 'volhigh') {
                            jjPlayerBtnVol.innerHTML = svgIcos.volhigh;
                            icoVol = 'volhigh';
                        }
                    } else {
                        if (icoVol != 'vollow') {
                            jjPlayerBtnVol.innerHTML = svgIcos.vollow;
                            icoVol = 'vollow';
                        }
                    }
                } else {
                    jjPlayerVideo.muted = true;
                    if (icoVol != 'volmute') {
                        jjPlayerBtnVol.innerHTML = svgIcos.volmute;
                        icoVol = 'volmute';
                    }
                }
            }
        }
        function setSeeker(evt) {
            var clientX = (String(evt.clientX) !== 'undefined' ? evt.clientX : evt.touches[0].clientX);
            var ClientRect = jjPlayerProgress.getBoundingClientRect(),
                value = (clientX - ClientRect.left) / rangeSeeker.clientWidth,
                cH = Math.floor((value * jjPlayerVideo.duration) / 3600),
                cM = Math.floor((value * jjPlayerVideo.duration) / 60),
                cS = Math.floor((((value * jjPlayerVideo.duration) / 60) % 1) * 60);
            currentTimeTooltip.textContent = convertTimer(cH, cM, cS);
            currentTimeTooltip.style.left = (value * 100) + '%';
            switch (evt.type) {
                case 'mousemove':
                    if (sliderDrag) {
                        progressVideo.style.width = (value * 100) + '%';
                        updateSeeker();
                    }
                    break;
                case 'touchmove':
                    progressVideo.style.width = (value * 100) + '%';
                    updateSeeker();
                    break;
                default:
                    updateSeeker();
            }
            function updateSeeker() {
                rangeSeeker.value = (value * 100);
                progressVideo.style.width = (value * 100) + '%';
                jjPlayerVideo.currentTime = (value * jjPlayerVideo.duration);
            }
        }
        function muteVideo() {
            if (!jjPlayerVideo.muted) {
                volTarget = (jjPlayerVideo.volume > 0 ? jjPlayerVideo.volume : 1);
                jjPlayerVideo.muted = true;
                jjPlayerVideo.volume = 0;
                jjPlayerBtnVol.innerHTML = svgIcos.volmute;
                icoVol = 'volmute';
                rangeVol.value = 0;
                sliderVol.style.width = 0;
            } else {
                jjPlayerVideo.muted = false;
                jjPlayerVideo.volume = volTarget;
                rangeVol.value = volTarget;
                sliderVol.style.width = (volTarget * 100) + '%';
                if (jjPlayerVideo.volume >= 0.5) {
                    jjPlayerBtnVol.innerHTML = svgIcos.volhigh;
                    icoVol = 'volhigh';
                } else {
                    jjPlayerBtnVol.innerHTML = svgIcos.vollow;
                    icoVol = 'vollow';
                }
            }
        }
        function playVideo(evt) {
            var e = String(evt.target.tagName);
            if (isTouch && e.toLowerCase() === 'video') {
                return false;
            }
            if (jjPlayerVideo.played.length != 0) {
                if (jjPlayerVideo.paused) {
                    played = true;
                    jjPlayerVideo.play();
                    jjPlayerBtnPlay.innerHTML = svgIcos.pause;
                    jjPlayerBtnPlayCenter.innerHTML = svgIcos.pausec;
                    if (!isTouch) {
                        jjPlayerBtnPlayCenter.style.display = 'none';
                    }
                } else {
                    played = false;
                    jjPlayerVideo.pause();
                    jjPlayerBtnPlay.innerHTML = svgIcos.play;
                    jjPlayerBtnPlayCenter.innerHTML = svgIcos.playc;
                    if (!isTouch) {
                        jjPlayerBtnPlayCenter.style.display = 'block';
                    }
                }
            } else {
                played = true;
                jjPlayerVideo.play();
                jjPlayerBtnPlay.innerHTML = svgIcos.pause;
                jjPlayerBtnPlayCenter.innerHTML = svgIcos.pausec;
                if (!isTouch) {
                    jjPlayerBtnPlayCenter.style.display = 'none';
                }
            }
        }
        function canplay(evt) {
            played = true;
            var h = Math.floor(jjPlayerVideo.duration / 3600),
                m = Math.floor(jjPlayerVideo.duration / 60),
                s = Math.floor(((jjPlayerVideo.duration / 60) % 1) * 60);
            jjPlayerTotalTime.textContent = convertTimer(h, m, s);
            var cH = Math.floor(jjPlayerVideo.currentTime / 3600),
                cM = Math.floor(jjPlayerVideo.currentTime / 60),
                cS = Math.floor(((jjPlayerVideo.currentTime / 60) % 1) * 60);
            currentTimeTooltip.textContent = convertTimer(cH, cM, cS);
            handler(jjPlayerProgress, 'mousedown mouseup mousemove touchstart touchmove', setSeeker, !0);
            trackCaption = jjPlayerVideo.textTracks[0];
            if (trackCaption) {
                trackCaption.mode = activeCaption;
            }
            handler(jjPlayerBtnPlay, 'click', playVideo, !0);
            handler(jjPlayerBtnPlayCenter, 'click', playVideo, !0);
            handler(jjPlayerVideo, 'click touchstart', playVideo, !0);
            if (isTouch) {
                handler(jjPlayerVideo, 'click', playVideo, !1);
            }

        }
       function handler(e, t, f, r, c) {
            var s = t.split(" ");
            for (var i = 0; i < s.length; i++) {
                e[r ? "addEventListener" : "removeEventListener"](s[i], f, c);
            }
        }
        function get(e, v, a, i) {
            i = !i ? 0 : i;
            switch (a) {
                case 'class':
                    return e["getElementsByClassName"](v)[i];
                    break;
                case 'tag':
                    return e["getElementsByTagName"](v)[i];
                    break;
                default:
                    return e["getElementById"](v);
            }
        }
        function videoLoader(evt) {
            if (played) {
                if (evt.type == 'waiting' || evt.type == 'loadstart') {
                    jjPlayerLoader.style.display = 'block';
                } else {
                    jjPlayerLoader.style.display = 'none';
                }
            }
        }
        function expandPlayer() {
            var df, rf, ef;
            df = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
            rf = jjPlayerElem.requestFullscreen || jjPlayerElem.msRequestFullscreen || jjPlayerElem.mozRequestFullScreen || jjPlayerElem.webkitRequestFullscreen;
            ef = document.exitFullscreen || document.msExitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen;
            if (!df) {
                rf.call(jjPlayerElem);
            } else {
                ef.call(document);
            }
        }
        function setTrack() {
            if (trackCaption) {
                if (trackCaption.mode == 'disabled') {
                    trackCaption.mode = 'hidden';
                    activeCaption = 'hidden';
                    jjPlayerBtnCC.className = 'jjplayer-captions';
                } else {
                    trackCaption.mode = 'disabled';
                    activeCaption = 'disabled';
                    jjPlayerBtnCC.className = 'jjplayer-captions disabled';
                    jjPlayerLegends.innerHTML = '<span></span>';
                }
            }
        }
        function cuesControls() {
            cuesTrack = trackCaption.activeCues;
            if (cuesTrack) {
                if (cuesTrack.length > 0) {
                    if (cuesText !== cuesTrack[0].getCueAsHTML().textContent)
                        cuesText = cuesTrack[0].getCueAsHTML().textContent;
                    jjPlayerLegends.innerHTML = '<span>' + cuesText + '</span>';
                } else {
                    if (cuesText !== '') {
                        cuesText = '';
                        jjPlayerLegends.innerHTML = '<span></span>';
                    }
                }
            }
        }
        construct();
    }
    totaljjPlayer = document.getElementsByClassName('jjplayer-video').length;
    if (totaljjPlayer > 0) {
        for (var i = 0; i < totaljjPlayer; i++) {
            idElement = 'jjplayer-' + Math.floor(Math.random() * 100000000);
            document.getElementsByClassName('jjplayer-video')[i].id = idElement;
            new jjPlayer(idElement);
        }
    }
})();